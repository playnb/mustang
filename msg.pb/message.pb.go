// Code generated by protoc-gen-go.
// source: mustang/msg.pb/message.proto
// DO NOT EDIT!

/*
Package msg is a generated protocol buffer package.

It is generated from these files:
	mustang/msg.pb/message.proto

It has these top-level messages:
	LoginRequst
	LoginRespose
	Ping
	Pong
	OAtuhUserProfile
	OAtuhTokenLogin
	OAuth2Request
	OAuth2Url
	OAuth2Response
*/
package msg

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import "io"
import "log"
import "net"
import "net/rpc"
import "time"
import protorpc "github.com/chai2010/protorpc"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type OAtuhRetCode int32

const (
	OAtuhRetCode_AUTH_OK          OAtuhRetCode = 0
	OAtuhRetCode_TOKEN_NOT_FOUND  OAtuhRetCode = 1
	OAtuhRetCode_SINA_AUTH_FAILED OAtuhRetCode = 2
)

var OAtuhRetCode_name = map[int32]string{
	0: "AUTH_OK",
	1: "TOKEN_NOT_FOUND",
	2: "SINA_AUTH_FAILED",
}
var OAtuhRetCode_value = map[string]int32{
	"AUTH_OK":          0,
	"TOKEN_NOT_FOUND":  1,
	"SINA_AUTH_FAILED": 2,
}

func (x OAtuhRetCode) Enum() *OAtuhRetCode {
	p := new(OAtuhRetCode)
	*p = x
	return p
}
func (x OAtuhRetCode) String() string {
	return proto.EnumName(OAtuhRetCode_name, int32(x))
}
func (x *OAtuhRetCode) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(OAtuhRetCode_value, data, "OAtuhRetCode")
	if err != nil {
		return err
	}
	*x = OAtuhRetCode(value)
	return nil
}

type LoginRequst struct {
	ServiceType      *uint32 `protobuf:"varint,1,opt,name=service_type" json:"service_type,omitempty"`
	ServiceIp        *string `protobuf:"bytes,2,opt,name=service_ip" json:"service_ip,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *LoginRequst) Reset()         { *m = LoginRequst{} }
func (m *LoginRequst) String() string { return proto.CompactTextString(m) }
func (*LoginRequst) ProtoMessage()    {}

func (m *LoginRequst) GetServiceType() uint32 {
	if m != nil && m.ServiceType != nil {
		return *m.ServiceType
	}
	return 0
}

func (m *LoginRequst) GetServiceIp() string {
	if m != nil && m.ServiceIp != nil {
		return *m.ServiceIp
	}
	return ""
}

type LoginRespose struct {
	RetCode          *uint32 `protobuf:"varint,1,opt,name=ret_code" json:"ret_code,omitempty"`
	ServiceType      *uint32 `protobuf:"varint,2,opt,name=service_type" json:"service_type,omitempty"`
	ServiceId        *uint64 `protobuf:"varint,3,opt,name=service_id" json:"service_id,omitempty"`
	ServiceIp        *string `protobuf:"bytes,4,opt,name=service_ip" json:"service_ip,omitempty"`
	ExterPort        *uint32 `protobuf:"varint,5,opt,name=exter_port" json:"exter_port,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *LoginRespose) Reset()         { *m = LoginRespose{} }
func (m *LoginRespose) String() string { return proto.CompactTextString(m) }
func (*LoginRespose) ProtoMessage()    {}

func (m *LoginRespose) GetRetCode() uint32 {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return 0
}

func (m *LoginRespose) GetServiceType() uint32 {
	if m != nil && m.ServiceType != nil {
		return *m.ServiceType
	}
	return 0
}

func (m *LoginRespose) GetServiceId() uint64 {
	if m != nil && m.ServiceId != nil {
		return *m.ServiceId
	}
	return 0
}

func (m *LoginRespose) GetServiceIp() string {
	if m != nil && m.ServiceIp != nil {
		return *m.ServiceIp
	}
	return ""
}

func (m *LoginRespose) GetExterPort() uint32 {
	if m != nil && m.ExterPort != nil {
		return *m.ExterPort
	}
	return 0
}

type Ping struct {
	ServiceId        *uint64 `protobuf:"varint,1,opt,name=service_id" json:"service_id,omitempty"`
	Timestamp        *uint32 `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Ping) Reset()         { *m = Ping{} }
func (m *Ping) String() string { return proto.CompactTextString(m) }
func (*Ping) ProtoMessage()    {}

func (m *Ping) GetServiceId() uint64 {
	if m != nil && m.ServiceId != nil {
		return *m.ServiceId
	}
	return 0
}

func (m *Ping) GetTimestamp() uint32 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

type Pong struct {
	ServiceId        *uint64 `protobuf:"varint,1,opt,name=service_id" json:"service_id,omitempty"`
	Timestamp        *uint32 `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Pong) Reset()         { *m = Pong{} }
func (m *Pong) String() string { return proto.CompactTextString(m) }
func (*Pong) ProtoMessage()    {}

func (m *Pong) GetServiceId() uint64 {
	if m != nil && m.ServiceId != nil {
		return *m.ServiceId
	}
	return 0
}

func (m *Pong) GetTimestamp() uint32 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

type OAtuhUserProfile struct {
	Accid            *uint64 `protobuf:"varint,1,opt,name=accid" json:"accid,omitempty"`
	Oauth            *string `protobuf:"bytes,2,opt,name=oauth" json:"oauth,omitempty"`
	Name             *string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *OAtuhUserProfile) Reset()         { *m = OAtuhUserProfile{} }
func (m *OAtuhUserProfile) String() string { return proto.CompactTextString(m) }
func (*OAtuhUserProfile) ProtoMessage()    {}

func (m *OAtuhUserProfile) GetAccid() uint64 {
	if m != nil && m.Accid != nil {
		return *m.Accid
	}
	return 0
}

func (m *OAtuhUserProfile) GetOauth() string {
	if m != nil && m.Oauth != nil {
		return *m.Oauth
	}
	return ""
}

func (m *OAtuhUserProfile) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

type OAtuhTokenLogin struct {
	Token            *string `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *OAtuhTokenLogin) Reset()         { *m = OAtuhTokenLogin{} }
func (m *OAtuhTokenLogin) String() string { return proto.CompactTextString(m) }
func (*OAtuhTokenLogin) ProtoMessage()    {}

func (m *OAtuhTokenLogin) GetToken() string {
	if m != nil && m.Token != nil {
		return *m.Token
	}
	return ""
}

type OAuth2Request struct {
	Accid            *uint64 `protobuf:"varint,1,opt,name=accid" json:"accid,omitempty"`
	AuthSid          *uint64 `protobuf:"varint,2,opt,name=auth_sid" json:"auth_sid,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *OAuth2Request) Reset()         { *m = OAuth2Request{} }
func (m *OAuth2Request) String() string { return proto.CompactTextString(m) }
func (*OAuth2Request) ProtoMessage()    {}

func (m *OAuth2Request) GetAccid() uint64 {
	if m != nil && m.Accid != nil {
		return *m.Accid
	}
	return 0
}

func (m *OAuth2Request) GetAuthSid() uint64 {
	if m != nil && m.AuthSid != nil {
		return *m.AuthSid
	}
	return 0
}

type OAuth2Url struct {
	Accid            *uint64 `protobuf:"varint,1,opt,name=accid" json:"accid,omitempty"`
	AuthSid          *uint64 `protobuf:"varint,2,opt,name=auth_sid" json:"auth_sid,omitempty"`
	Url              *string `protobuf:"bytes,3,opt,name=url" json:"url,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *OAuth2Url) Reset()         { *m = OAuth2Url{} }
func (m *OAuth2Url) String() string { return proto.CompactTextString(m) }
func (*OAuth2Url) ProtoMessage()    {}

func (m *OAuth2Url) GetAccid() uint64 {
	if m != nil && m.Accid != nil {
		return *m.Accid
	}
	return 0
}

func (m *OAuth2Url) GetAuthSid() uint64 {
	if m != nil && m.AuthSid != nil {
		return *m.AuthSid
	}
	return 0
}

func (m *OAuth2Url) GetUrl() string {
	if m != nil && m.Url != nil {
		return *m.Url
	}
	return ""
}

type OAuth2Response struct {
	Accid            *uint64           `protobuf:"varint,1,opt,name=accid" json:"accid,omitempty"`
	AuthSid          *uint64           `protobuf:"varint,2,opt,name=auth_sid" json:"auth_sid,omitempty"`
	RetCode          *uint32           `protobuf:"varint,3,opt,name=ret_code" json:"ret_code,omitempty"`
	User             *OAtuhUserProfile `protobuf:"bytes,4,opt,name=user" json:"user,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *OAuth2Response) Reset()         { *m = OAuth2Response{} }
func (m *OAuth2Response) String() string { return proto.CompactTextString(m) }
func (*OAuth2Response) ProtoMessage()    {}

func (m *OAuth2Response) GetAccid() uint64 {
	if m != nil && m.Accid != nil {
		return *m.Accid
	}
	return 0
}

func (m *OAuth2Response) GetAuthSid() uint64 {
	if m != nil && m.AuthSid != nil {
		return *m.AuthSid
	}
	return 0
}

func (m *OAuth2Response) GetRetCode() uint32 {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return 0
}

func (m *OAuth2Response) GetUser() *OAtuhUserProfile {
	if m != nil {
		return m.User
	}
	return nil
}

func init() {
	proto.RegisterEnum("msg.OAtuhRetCode", OAtuhRetCode_name, OAtuhRetCode_value)
}

type SuperService interface {
	Echo(in *Ping, out *Pong) error
	Login(in *LoginRequst, out *LoginRespose) error
	AuthByToken(in *OAtuhTokenLogin, out *OAuth2Response) error
	GetAuthUrlBySina(in *OAuth2Request, out *OAuth2Url) error
	WaitAuthResultBySina(in *OAuth2Request, out *OAuth2Response) error
}

// AcceptSuperServiceClient accepts connections on the listener and serves requests
// for each incoming connection.  Accept blocks; the caller typically
// invokes it in a go statement.
func AcceptSuperServiceClient(lis net.Listener, x SuperService) {
	srv := rpc.NewServer()
	if err := srv.RegisterName("SuperService", x); err != nil {
		log.Fatal(err)
	}

	for {
		conn, err := lis.Accept()
		if err != nil {
			log.Fatalf("lis.Accept(): %v\n", err)
		}
		go srv.ServeCodec(protorpc.NewServerCodec(conn))
	}
}

// RegisterSuperService publish the given SuperService implementation on the server.
func RegisterSuperService(srv *rpc.Server, x SuperService) error {
	if err := srv.RegisterName("SuperService", x); err != nil {
		return err
	}
	return nil
}

// NewSuperServiceServer returns a new SuperService Server.
func NewSuperServiceServer(x SuperService) *rpc.Server {
	srv := rpc.NewServer()
	if err := srv.RegisterName("SuperService", x); err != nil {
		log.Fatal(err)
	}
	return srv
}

// ListenAndServeSuperService listen announces on the local network address laddr
// and serves the given SuperService implementation.
func ListenAndServeSuperService(network, addr string, x SuperService) error {
	lis, err := net.Listen(network, addr)
	if err != nil {
		return err
	}
	defer lis.Close()

	srv := rpc.NewServer()
	if err := srv.RegisterName("SuperService", x); err != nil {
		return err
	}

	for {
		conn, err := lis.Accept()
		if err != nil {
			log.Fatalf("lis.Accept(): %v\n", err)
		}
		go srv.ServeCodec(protorpc.NewServerCodec(conn))
	}
}

type SuperServiceClient struct {
	*rpc.Client
}

// NewSuperServiceClient returns a SuperService stub to handle
// requests to the set of SuperService at the other end of the connection.
func NewSuperServiceClient(conn io.ReadWriteCloser) *SuperServiceClient {
	c := rpc.NewClientWithCodec(protorpc.NewClientCodec(conn))
	return &SuperServiceClient{c}
}

func (c *SuperServiceClient) Echo(in *Ping) (out *Pong, err error) {
	if in == nil {
		in = new(Ping)
	}
	out = new(Pong)
	if err = c.Call("SuperService.Echo", in, out); err != nil {
		return nil, err
	}
	return out, nil
}
func (c *SuperServiceClient) Login(in *LoginRequst) (out *LoginRespose, err error) {
	if in == nil {
		in = new(LoginRequst)
	}
	out = new(LoginRespose)
	if err = c.Call("SuperService.Login", in, out); err != nil {
		return nil, err
	}
	return out, nil
}
func (c *SuperServiceClient) AuthByToken(in *OAtuhTokenLogin) (out *OAuth2Response, err error) {
	if in == nil {
		in = new(OAtuhTokenLogin)
	}
	out = new(OAuth2Response)
	if err = c.Call("SuperService.AuthByToken", in, out); err != nil {
		return nil, err
	}
	return out, nil
}
func (c *SuperServiceClient) GetAuthUrlBySina(in *OAuth2Request) (out *OAuth2Url, err error) {
	if in == nil {
		in = new(OAuth2Request)
	}
	out = new(OAuth2Url)
	if err = c.Call("SuperService.GetAuthUrlBySina", in, out); err != nil {
		return nil, err
	}
	return out, nil
}
func (c *SuperServiceClient) WaitAuthResultBySina(in *OAuth2Request) (out *OAuth2Response, err error) {
	if in == nil {
		in = new(OAuth2Request)
	}
	out = new(OAuth2Response)
	if err = c.Call("SuperService.WaitAuthResultBySina", in, out); err != nil {
		return nil, err
	}
	return out, nil
}

// DialSuperService connects to an SuperService at the specified network address.
func DialSuperService(network, addr string) (*SuperServiceClient, error) {
	c, err := protorpc.Dial(network, addr)
	if err != nil {
		return nil, err
	}
	return &SuperServiceClient{c}, nil
}

// DialSuperServiceTimeout connects to an SuperService at the specified network address.
func DialSuperServiceTimeout(network, addr string, timeout time.Duration) (*SuperServiceClient, error) {
	c, err := protorpc.DialTimeout(network, addr, timeout)
	if err != nil {
		return nil, err
	}
	return &SuperServiceClient{c}, nil
}
