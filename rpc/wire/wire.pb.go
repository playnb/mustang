// Code generated by protoc-gen-gogo.
// source: wire.proto
// DO NOT EDIT!

/*
	Package wire is a generated protocol buffer package.

	It is generated from these files:
		wire.proto

	It has these top-level messages:
		RequestHeader
		ResponseHeader
*/
package wire

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Const int32

const (
	Const_Zero                Const = 0
	Const_MaxRequestHeaderLen Const = 1024
)

var Const_name = map[int32]string{
	0:    "Zero",
	1024: "MaxRequestHeaderLen",
}
var Const_value = map[string]int32{
	"Zero":                0,
	"MaxRequestHeaderLen": 1024,
}

func (x Const) String() string {
	return proto.EnumName(Const_name, int32(x))
}
func (Const) EnumDescriptor() ([]byte, []int) { return fileDescriptorWire, []int{0} }

type RequestHeader struct {
	Id                         uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Method                     string `protobuf:"bytes,2,opt,name=method,proto3" json:"method,omitempty"`
	RawRequestLen              uint32 `protobuf:"varint,3,opt,name=raw_request_len,json=rawRequestLen,proto3" json:"raw_request_len,omitempty"`
	SnappyCompressedRequestLen uint32 `protobuf:"varint,4,opt,name=snappy_compressed_request_len,json=snappyCompressedRequestLen,proto3" json:"snappy_compressed_request_len,omitempty"`
	Checksum                   uint32 `protobuf:"varint,5,opt,name=checksum,proto3" json:"checksum,omitempty"`
}

func (m *RequestHeader) Reset()                    { *m = RequestHeader{} }
func (m *RequestHeader) String() string            { return proto.CompactTextString(m) }
func (*RequestHeader) ProtoMessage()               {}
func (*RequestHeader) Descriptor() ([]byte, []int) { return fileDescriptorWire, []int{0} }

func (m *RequestHeader) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *RequestHeader) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

func (m *RequestHeader) GetRawRequestLen() uint32 {
	if m != nil {
		return m.RawRequestLen
	}
	return 0
}

func (m *RequestHeader) GetSnappyCompressedRequestLen() uint32 {
	if m != nil {
		return m.SnappyCompressedRequestLen
	}
	return 0
}

func (m *RequestHeader) GetChecksum() uint32 {
	if m != nil {
		return m.Checksum
	}
	return 0
}

type ResponseHeader struct {
	Id                          uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Error                       string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	RawResponseLen              uint32 `protobuf:"varint,3,opt,name=raw_response_len,json=rawResponseLen,proto3" json:"raw_response_len,omitempty"`
	SnappyCompressedResponseLen uint32 `protobuf:"varint,4,opt,name=snappy_compressed_response_len,json=snappyCompressedResponseLen,proto3" json:"snappy_compressed_response_len,omitempty"`
	Checksum                    uint32 `protobuf:"varint,5,opt,name=checksum,proto3" json:"checksum,omitempty"`
}

func (m *ResponseHeader) Reset()                    { *m = ResponseHeader{} }
func (m *ResponseHeader) String() string            { return proto.CompactTextString(m) }
func (*ResponseHeader) ProtoMessage()               {}
func (*ResponseHeader) Descriptor() ([]byte, []int) { return fileDescriptorWire, []int{1} }

func (m *ResponseHeader) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ResponseHeader) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *ResponseHeader) GetRawResponseLen() uint32 {
	if m != nil {
		return m.RawResponseLen
	}
	return 0
}

func (m *ResponseHeader) GetSnappyCompressedResponseLen() uint32 {
	if m != nil {
		return m.SnappyCompressedResponseLen
	}
	return 0
}

func (m *ResponseHeader) GetChecksum() uint32 {
	if m != nil {
		return m.Checksum
	}
	return 0
}

func init() {
	proto.RegisterType((*RequestHeader)(nil), "wire.RequestHeader")
	proto.RegisterType((*ResponseHeader)(nil), "wire.ResponseHeader")
	proto.RegisterEnum("wire.Const", Const_name, Const_value)
}
func (m *RequestHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestHeader) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintWire(dAtA, i, uint64(m.Id))
	}
	if len(m.Method) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintWire(dAtA, i, uint64(len(m.Method)))
		i += copy(dAtA[i:], m.Method)
	}
	if m.RawRequestLen != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintWire(dAtA, i, uint64(m.RawRequestLen))
	}
	if m.SnappyCompressedRequestLen != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintWire(dAtA, i, uint64(m.SnappyCompressedRequestLen))
	}
	if m.Checksum != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintWire(dAtA, i, uint64(m.Checksum))
	}
	return i, nil
}

func (m *ResponseHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseHeader) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintWire(dAtA, i, uint64(m.Id))
	}
	if len(m.Error) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintWire(dAtA, i, uint64(len(m.Error)))
		i += copy(dAtA[i:], m.Error)
	}
	if m.RawResponseLen != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintWire(dAtA, i, uint64(m.RawResponseLen))
	}
	if m.SnappyCompressedResponseLen != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintWire(dAtA, i, uint64(m.SnappyCompressedResponseLen))
	}
	if m.Checksum != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintWire(dAtA, i, uint64(m.Checksum))
	}
	return i, nil
}

func encodeFixed64Wire(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Wire(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintWire(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *RequestHeader) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovWire(uint64(m.Id))
	}
	l = len(m.Method)
	if l > 0 {
		n += 1 + l + sovWire(uint64(l))
	}
	if m.RawRequestLen != 0 {
		n += 1 + sovWire(uint64(m.RawRequestLen))
	}
	if m.SnappyCompressedRequestLen != 0 {
		n += 1 + sovWire(uint64(m.SnappyCompressedRequestLen))
	}
	if m.Checksum != 0 {
		n += 1 + sovWire(uint64(m.Checksum))
	}
	return n
}

func (m *ResponseHeader) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovWire(uint64(m.Id))
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovWire(uint64(l))
	}
	if m.RawResponseLen != 0 {
		n += 1 + sovWire(uint64(m.RawResponseLen))
	}
	if m.SnappyCompressedResponseLen != 0 {
		n += 1 + sovWire(uint64(m.SnappyCompressedResponseLen))
	}
	if m.Checksum != 0 {
		n += 1 + sovWire(uint64(m.Checksum))
	}
	return n
}

func sovWire(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozWire(x uint64) (n int) {
	return sovWire(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RequestHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWire
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWire
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Method", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWire
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWire
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Method = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RawRequestLen", wireType)
			}
			m.RawRequestLen = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWire
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RawRequestLen |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SnappyCompressedRequestLen", wireType)
			}
			m.SnappyCompressedRequestLen = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWire
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SnappyCompressedRequestLen |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Checksum", wireType)
			}
			m.Checksum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWire
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Checksum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWire(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWire
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWire
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWire
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWire
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWire
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RawResponseLen", wireType)
			}
			m.RawResponseLen = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWire
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RawResponseLen |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SnappyCompressedResponseLen", wireType)
			}
			m.SnappyCompressedResponseLen = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWire
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SnappyCompressedResponseLen |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Checksum", wireType)
			}
			m.Checksum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWire
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Checksum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWire(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWire
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipWire(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowWire
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWire
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWire
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthWire
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowWire
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipWire(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthWire = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowWire   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("wire.proto", fileDescriptorWire) }

var fileDescriptorWire = []byte{
	// 288 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x91, 0x4f, 0x4b, 0x84, 0x40,
	0x18, 0xc6, 0x1b, 0xd3, 0xc5, 0x5e, 0xd2, 0x64, 0x8a, 0x90, 0x8d, 0x44, 0xf6, 0x10, 0x52, 0xd0,
	0xa5, 0x4f, 0x50, 0x5e, 0x3a, 0x6c, 0x17, 0x8f, 0x5d, 0xc4, 0xf4, 0x85, 0x95, 0x72, 0xc6, 0xde,
	0x71, 0xb1, 0x6e, 0x7d, 0xb2, 0xa0, 0x5b, 0xc7, 0x3e, 0x42, 0xf8, 0x49, 0x62, 0x1d, 0xd9, 0x5c,
	0xfa, 0x73, 0x9b, 0x77, 0x78, 0x7e, 0xcf, 0xcc, 0x8f, 0x17, 0xa0, 0x2d, 0x09, 0xcf, 0x6b, 0x92,
	0x8d, 0xe4, 0xe6, 0xea, 0x3c, 0x7b, 0x65, 0xe0, 0x24, 0xf8, 0xb8, 0x44, 0xd5, 0x5c, 0x63, 0x56,
	0x20, 0x71, 0x17, 0x8c, 0xb2, 0xf0, 0x59, 0xc8, 0x22, 0x33, 0x31, 0xca, 0x82, 0x1f, 0xc2, 0xa4,
	0xc2, 0x66, 0x21, 0x0b, 0xdf, 0x08, 0x59, 0xb4, 0x93, 0x0c, 0x13, 0x3f, 0x81, 0x3d, 0xca, 0xda,
	0x94, 0x34, 0x9c, 0x3e, 0xa0, 0xf0, 0xb7, 0x43, 0x16, 0x39, 0x89, 0x43, 0x59, 0x3b, 0x54, 0xce,
	0x51, 0xf0, 0x4b, 0x38, 0x56, 0x22, 0xab, 0xeb, 0xe7, 0x34, 0x97, 0x55, 0x4d, 0xa8, 0x14, 0x16,
	0x1b, 0x94, 0xd9, 0x53, 0x53, 0x1d, 0x8a, 0xd7, 0x99, 0x51, 0xc5, 0x14, 0xec, 0x7c, 0x81, 0xf9,
	0xbd, 0x5a, 0x56, 0xbe, 0xd5, 0xa7, 0xd7, 0xf3, 0xec, 0x8d, 0x81, 0x9b, 0xa0, 0xaa, 0xa5, 0x50,
	0xf8, 0x87, 0xc1, 0x01, 0x58, 0x48, 0x24, 0x69, 0x10, 0xd0, 0x03, 0x8f, 0xc0, 0xd3, 0xff, 0xd7,
	0xec, 0x48, 0xc0, 0xed, 0x05, 0xf4, 0xf5, 0xea, 0xf9, 0x18, 0x82, 0xdf, 0x0c, 0x46, 0x9c, 0x56,
	0x38, 0xfa, 0xa9, 0xf0, 0x5d, 0xf2, 0x8f, 0xc3, 0xe9, 0x19, 0x58, 0xb1, 0x14, 0xaa, 0xe1, 0x36,
	0x98, 0xb7, 0x48, 0xd2, 0xdb, 0xe2, 0x3e, 0xec, 0xdf, 0x64, 0x4f, 0x1b, 0x9b, 0x99, 0xa3, 0xf0,
	0x5e, 0xec, 0xab, 0xdd, 0xf7, 0x2e, 0x60, 0x1f, 0x5d, 0xc0, 0x3e, 0xbb, 0x80, 0xdd, 0x4d, 0xfa,
	0x65, 0x5e, 0x7c, 0x05, 0x00, 0x00, 0xff, 0xff, 0xeb, 0xb3, 0x27, 0x2f, 0xda, 0x01, 0x00, 0x00,
}
